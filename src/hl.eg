
require:
   path
   quaint -> tools
   /html


hl{hljs, raw-lang, code, inline, default-language} =
   langstr =
      if raw-lang === "":
         default-language
      else:
         raw-lang
   body =
      if langstr:
         then:
            try:
               hljs.highlight{langstr, code}.value
            catch e:
               html{code}
         else:
            html{code}
   if inline:
      code.hlinline % raw % body
   else:
      pre.hljs % raw % body


main{*match} =
   {[@] and {is-quaint-engine => true?}, options = {=}} ->
      current-hljs = options.hljs
      options.install-plugins??{current-hljs}

      block-rule{engine, {=> lang = null, => body}} =
         code = tools.dedent{tools.raw-relative{body}.replace{R"^ *\n", ""}}
         raw-lang = lang??.raw{}.trim{} or ""
         hl{current-hljs, raw-lang, code, false
            options.default-block or options.default-language or options.default}

      inline-rule{engine, {=> lang = null, => body}} =
         code = tools.shed{body}.raw{}.replace{R.g"\\+[{}()\[\]]", x -> x.slice{1}}
         raw-lang = lang??.raw{}.trim{} or ""
         hl{current-hljs, raw-lang, code, true
            options.default-inline or options.default-language or options.default}

      theme = options.theme or .default
      name =
         if theme.ends-with{".css"}:
            'style/highlight/{path.basename{theme}}'
         else:
            'style/highlight/{theme}.css'

      @register-resources with {
         name => {
            path =
               if theme.ends-with{".css"}:
                  theme
               else:
                  path.join{__dirname, '../node_modules/highlight.js/styles/{theme}.css'}
            contents = true
            type = .css
            method = .head
         }
      }

      @register-rules with {
         '\\maybe\\lang {options.operator-block or "&"} \\body' =>
            block-rule
         '\\maybe\\lang {options.operator-inline or "`"} \\body' => ;;"
            inline-rule
         '{options.operator-block or "&"} \\body' =>
            block-rule
         '{options.operator-inline or "`"} \\body' => ;;"
            inline-rule
      }
   {options = {=}} ->
      {@} -> main{@, options}

provide = main
