
require:
   inquirer-promise as inq
   chalk
   fs, path


styles-dir = path.join{__dirname, '../styles/'}


async quaint-setup{config, instructions} =
   url = "https://github.com/breuleux/quaint-highlight"
   print 'Plugin documentation: {chalk.bold.cyan{url}}'

   data = config.plugins.highlight or= {=}

   theme = await inq.list{"What theme do you want to use?", themes, {default = 1}} where
      themes = {
         "Choose a file..."
         "default"
         new inq.Separator{}
         *[
            fs.readdir-sync{styles-dir} each name ->
               if name.ends-with{".css"} and name !== "default.css":
                  name[... -4]
               else:
                  continue
         ]
         new inq.Separator{}
      }

   match theme:
      R"^Choose"? ->
         p = await inq.input{'Path of the stylesheet relative to {config.content-root}/:'}
         data.theme = p
      else ->
         data.theme = theme

   data.theme or= "default"

   is-lang = await inq.confirm{"Do you want to set a default language?", {default = false}}
   {lang, which} =
      if is-lang:
         {
            await inq.input{"What is the default language?"} with
               {
                  default = data.default-block
                  validate{name} =
                     [name != ""] or "You must enter the name of a language to highlight."
               }
            await inq.checkbox{"Use the default language for:"} with
               {
                  {name = "Code blocks"
                   value = .default-block
                   checked = if{undefined? data.default-block
                                true
                                true? data.default-block}}
                  {name = "Inline code"
                   value = .default-inline
                   checked = true? data.default-inline}
               }
         }
      else:
         {null, {}}

   data.default-block = null
   data.default-inline = null
   which each field -> data[field] = lang or null



provide = quaint-setup
